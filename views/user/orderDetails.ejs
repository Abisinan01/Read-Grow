<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details - REad & GroW</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>

<body class="bg-gray-50 min-h-screen font-sans">
  <%- include("../partials/user/navBar.ejs") %>

    <div class="container mx-auto px-6 py-10">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Order Details</h1>
        <a href="/read-and-grow/orders"
          class="text-blue-600 hover:text-blue-800 font-medium transition duration-200 flex items-center">
          <i class="fas fa-arrow-left mr-2"></i> Go Back
        </a>
      </div>

      <div
        class="bg-white p-8 rounded-xl shadow-md border border-gray-100 transform transition-all duration-300 hover:shadow-lg">
        <div class="mb-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-5 border-b border-gray-200 pb-3">Order Summary</h2>
          <div class="space-y-4 text-gray-700">
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800">Order Number:</span>
              <span class="text-gray-900 font-semibold" data-attribute-id="<%= order._id %>">#<%= order.orderId %>
              </span>
            </div>
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800">Order Date:</span>
              <button  class=" text-gray-900">
                <%= new Date(order.createdAt).toLocaleDateString('en-US', { year: 'numeric' , month: 'long' ,
                  day: 'numeric' }) %>
              </button>
            </div>
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800">Subtotal :</span>
              <span class="text-gray-900 font-semibold"><%= order.subTotal %></span>
            </div>
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800">Payment status:</span>
              <span class="<% 
              if (order.paymentStatus === 'failed') { %> text-red-600 font-semibold <% } 
              else if (order.paymentStatus === 'Refunded') { %> text-yellow-600 font-semibold <% } 
              else if (order.paymentStatus === 'paid') { %> text-green-600 font-semibold <% } 
              else if (order.paymentStatus === 'pending') { %> text-yellow-600 font-semibold <% } 
              else { %> text-gray-900 font-semibold <% } 
              %>">
              <%= order.paymentStatus %>
              </span>

            </div>
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800">Shipping charge</span>
              <span class="text-gray-900 font-semibold"><%= order.shippingCharge %></span>
            </div>
            <% if(order.discount){%>
              <div class="flex justify-between items-center">
                <span class="font-medium text-gray-800">Discount</span>
                <span class="text-gray-900 font-semibold">-<%= order.discount %></span>
              </div>
            <% } %>
            <% if(order.coupon && order.isCouponAvailable){%>
              <div class="flex justify-between items-center">
                <span class="font-medium text-gray-800">Applied coupon</span>
                <span class="text-gray-900 font-semibold">-<%= order.coupon.discountValue %></span>
              </div>
            <% }else if(order.coupon && !order.isCouponAvailable){ %>
              <div class="flex justify-between items-center">
                <span class="font-medium text-gray-800">Applied coupon</span>
                <span class="text-gray-900 font-semibold line-through">-<%= order.coupon.discountValue %></span>
              </div>
            <% } %>
            <div class="flex justify-between items-center">
              <span class="font-medium text-gray-800 ">Total Amount:</span>
              <span style="font-size: 18px; font-weight: bold;" id="x">Rs. <%= order.totalAmount %></span>
            </div>
          </div>
        </div>

        <div class="mb-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-5 border-b border-gray-200 pb-3">Items</h2>
          <div class="space-y-4">
            <% orderedProducts.forEach(item=> { %>
              <div
                class="flex items-center justify-between p-5 bg-gray-50 rounded-xl hover:bg-gray-100 transition duration-200">
                <div class="flex items-center space-x-5">
                  <div class="w-14 h-18 bg-gray-200 rounded-lg flex items-center justify-center">
                    <img class="w-full h-full object-cover rounded-lg" src="<%= item.image || '/default-image.jpg' %>"
                      alt="<%= item.name %>">
                  </div>
                  <div>
                    <p class="font-medium text-gray-900">
                      <%= item.name %>
                    </p>
                    <p class="text-sm text-gray-600">Qty: <%= item.quantity %>
                    </p>
                    <p class="text-sm text-gray-600 font-medium">Rs. <%= item.price %>/per</p>
                    <div class="flex items-center space-x-2 mt-1">
                      <span class="text-sm font-medium text-gray-700">Status:</span>
                      <span
                        class="text-sm font-medium <%= item.status === 'Pending' ? 'text-yellow-500' : item.status === 'Shipped' ? 'text-blue-500' : item.status === 'Delivered' ? 'text-green-600' : 'text-red-600' %>">
                        <%= item.status %>
                      </span>
                      <% if (item.status==='Pending' ) { %>
                        <i class="fas fa-clock text-yellow-500"></i>
                        <% } else if (item.status==='Shipped' ) { %>
                          <i class="fas fa-truck text-blue-500"></i>
                          <% } else if (item.status==='Delivered' ) { %>
                            <i class="fas fa-check-circle text-green-600"></i>
                            <% } else if (item.status==='Cancelled' || item.status==='Returned' ) { %>
                              <i class="fas fa-times-circle text-red-600"></i>
                        <% } %>
                    </div>
                    <% if(item.isRequested) {%>
                      <p class="font-medium text-blue-600">
                        Return requested
                      </p>
                    <% } %>
                  </div>
                </div>

                <div class="flex space-x-2">
                  <% if (item.status==='Pending' && order.paymentStatus !== 'failed') { %>
                    <button id="singleCancel" data-product-id="<%= item.productId %>" data-order-id="<%= order._id %>"
                      class="cancel-btn text-xs font-medium text-white bg-gray-600 hover:bg-red-600 px-2 py-1 rounded transition duration-200">
                      Cancel
                    </button>
                    <% } %>
                    <% if (item.status==='Delivered' ) { %>
                        <button id="returnOrder" data-product-id="<%= item.productId %>" data-order-id="<%= order._id %>"
                          class="return-btn text-xs font-medium text-white bg-gray-600 hover:bg-green-600 px-2 py-1 rounded transition duration-200">
                          Return
                        </button>
                    <% }%>
 
                </div>
              </div>
              <% }) %>
          </div>
        </div>

        <div class="mb-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-5 border-b border-gray-200 pb-3">Shipping Address</h2>
          <div class="text-gray-600 space-y-1">
            <p>
              Frist name : <%= (deliveryAddress)? deliveryAddress?.firstName:"" %>
            </p>
            <p>
              Last name : <%= (deliveryAddress)?deliveryAddress?.lastName:"" %>
            </p>
            <p>
              Street : <%= (deliveryAddress)?deliveryAddress?.street:"" %>, city : <%=
                  (deliveryAddress)?deliveryAddress?.city:"" %>
            </p>
            <p>
              State : <%= (deliveryAddress)?deliveryAddress?.state:"" %>
            </p>
            <p>
              Pincode : <%= (deliveryAddress)?deliveryAddress?.pincode:"" %>
            </p>
            <p>Phone : <%= (deliveryAddress)?deliveryAddress?.phoneNumber:"" %>
            </p>
          </div>
        </div>

        <div class="mb-8">
          <h2 class="text-xl font-semibold text-gray-900 mb-5 border-b border-gray-200 pb-3">Payment Method</h2>
          <p class="text-gray-600">
            <%= order.payment %>
          </p>
        </div>

           <div class="flex space-x-6">
          
            <button id="invoice"
              class="invoice-btn bg-gray-400 align-end hover:bg-red-400 text-white font-semibold py-3 px-6 shadow-md hover:shadow-lg transition duration-300 transform hover:-translate-y-1"
              data-order-id="<%= order._id %>" onclick="invoice('<%= order._id %>')"
              <% if(order.status !== "Delivered") { %>hidden<% } %>>
              Invoice
            </button>
            
            <% if(order.paymentStatus === 'failed'){ %>
              <button id="retryPayment" data-order-id="<%= order._id %>"
                class="return-btn bg-green-400 align-end hover:bg-red-400 text-white font-semibold py-3 px-6 shadow-md hover:shadow-lg transition duration-300 transform hover:-translate-y-1">
                Retry payment
              </button>
            <% } %>
          </div>
<!--  -->
      </div>

    </div>
    <script>
      let isToastShowing = false;
      let isProcessing = false;

      function showToast(message, type = 'error') {
          if (isToastShowing) return;

          isToastShowing = true;
          Toastify({
              text: message,
              duration: 2000,
              gravity: "top",
              position: "center",
              backgroundColor: type === 'success' ? "#16a34a" : "#dc2626",
              stopOnFocus: true,
              callback: function () {
                  isToastShowing = false;
              }
          }).showToast();
      }
      document.addEventListener('DOMContentLoaded', function () {

      document.querySelectorAll('#singleCancel').forEach(button => {
      button.addEventListener('click', async function () {
        const productId = this.getAttribute('data-product-id');
        const orderId = this.getAttribute('data-order-id');

        const { value: reason } = await Swal.fire({
          title: 'Cancel order',
          html: `
            <p>Please provide a reason for returning this order:</p>
            <textarea id="returnReason" class="swal2-textarea w-96 p-2 border rounded" placeholder="Enter your reason here..." rows="4"></textarea>
          `,
          showCancelButton: true,
          confirmButtonText: 'Submit Cancel',
          cancelButtonText: 'Cancel',
          confirmButtonColor: '#000223',
          cancelButtonColor: '#d33',
          preConfirm: () => {
            const reasonText = document.getElementById('returnReason').value.trim();
            if (!reasonText) {
              Swal.showValidationMessage('Please enter a reason for the return');
              return false;
            }
            return reasonText;
          }
        });

        if (!reason) return;

        const confirm = await Swal.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, cancel it!'
        });

        if (!confirm.isConfirmed) return;

        try {
          const response = await fetch(`/read-and-grow/single-cancel-order/${orderId}/${productId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ reason })
          });

          const result = await response.json();

          if (!response.ok) {
            return Swal.fire({
              icon: "error",
              title: "Oops...",
              text: result.message || "Something went wrong.",
              footer: '<a href="/read-and-grow/shop">Continue shopping</a>'
            });
          }

          // ✅ SUCCESS
          Swal.fire({
            title: result.message,
            text: "Your order item has been cancelled.",
            icon: "success"
          }).then(() => {
            window.location.href = "/read-and-grow/orders";
          });

        } catch (error) {
          console.error("Cancel error:", error);
          Swal.fire({
            icon: "error",
            title: "Something went wrong",
            text: "Please try again later."
          });
        }
      });
    });

        
        
        const retryPaymentBtn = document.getElementById('retryPayment');
        if (retryPaymentBtn) {
          retryPaymentBtn.addEventListener('click', async function(e) {
            const orderId = this.getAttribute('data-order-id');
            console.log(orderId);

            const finalPrice = document.getElementById('x').textContent.replace(/\D/g, "");
            console.log(finalPrice, 'finalprice');
            isProcessing = true;

            try {
              const orderData = {
                finalPrice: Number(finalPrice),
                receipt: 'receipt#1',
                notes: {},
                currency: "INR"
              };

              console.log('Submitting order:', orderData);

              const response = await fetch(`/read-and-grow/create-order`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderData)
              });

              const order = await response.json();
              console.log(order, 'orders');
              if (!response.ok) {
                Swal.fire({
                  title: "Warning!",
                  text: order.message,
                  icon: "warning",
                  confirmButtonText: "OK",
                });
                return;
              }

              const options = {
                key: 'rzp_test_ft2g0i6HYiyfqh', // Replace with your Razorpay key_id
                amount: order.amount,
                currency: order.currency,
                name: 'Read-and-grow',
                description: 'Transaction',
                order_id: order.id,
                callback_url: 'http://localhost:3999/read-and-grow/success',
                prefill: {
                  name: 'Abisinan',
                  email: 'abisinanabisinan9@gmail.com',
                  contact: '8086001138'
                },
                theme: {
                  color: '#F37254'
                },
                handler: function (response) {
                  fetch('/read-and-grow/verify-payment', {
                    method: "POST",
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_signature: response.razorpay_signature
                    })
                  }).then(res => res.json())
                    .then(data => {
                      if (data.status === 'Ok') {
                        retryPayment(orderId);
                      } else {
                        console.log(data.message);
                        showToast('Payment verification failed', 'error');
                        failedPayment();
                      }
                    })
                    .catch((error) => {
                      console.error("Error:", error);
                      showToast("Payment verification failed", "error");
                    });
                }
              };

              console.log(options, "options");
              const rzp = new Razorpay(options);
              rzp.on('payment.failed', async function (response) {
                failedPayment();
                Swal.fire({
                  title: "Payment Failed",
                  text: "Your order is saved. You can retry the payment from your orders section.",
                  icon: "error",
                  confirmButtonText: "Go to order",
                }).then(() => {
                  window.location.href = "/read-and-grow/orders";
                });
              });

              rzp.open();
            } catch (err) {
              showToast(err.message || 'Failed to process Razorpay payment', 'error');
              console.error('Error processing Razorpay payment:', err);
            } finally {
              isProcessing = false;
            }
          });
        }

            // retry payment function
            async function retryPayment(orderId) {
            try {
              const response = await fetch('/read-and-grow/retry-payment',{
                method:"POST",
                headers:{"Content-Type":"application/json"},
                body:JSON.stringify({orderId})
              })

              const result = await response.json()
              if(!response.ok){
                showToast(result.message)
                return
              }

              return location.reload()

            } catch (error) {
              console.log(error.message)
              
            }
          }
      

          document.getElementById('returnOrder').addEventListener('click', async function () {
          const orderId = this.getAttribute('data-order-id');
          const productId = this.getAttribute('data-product-id');

          console.log("Returning Order:", { orderId, productId });

          const { value: reason } = await Swal.fire({
            title: 'Return order',
            html: `
              <p>Please provide a reason for returning this order:</p>
              <textarea id="returnReason" class="swal2-textarea w-96 p-2 border rounded" placeholder="Enter your reason here..." rows="4"></textarea>
            `,
            showCancelButton: true,
            confirmButtonText: 'Submit return',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#000223',
            cancelButtonColor: '#d33',
            preConfirm: () => {
              const reasonText = document.getElementById('returnReason').value.trim();
              if (!reasonText) {
                Swal.showValidationMessage('Please enter a reason for the return');
                return false;
              }
              return reasonText;
            }
          });

          if (!reason) return;

          const confirm = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, return it!'
          });

          if (!confirm.isConfirmed) return;

          try {
            const response = await fetch(`/read-and-grow/return-order/${orderId}/${productId}`, {
              method: "DELETE",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ reason })
            });

            const result = await response.json();

            if (!response.ok) {
              await Swal.fire({
                icon: "error",
                title: "Oops...",
                text: result.message || "Something went wrong.",
                footer: '<a href="/read-and-grow/shop">Continue shopping</a>'
              });
              return;
            }

            await Swal.fire({
              title: result.message,
              text: "Your item has been returned successfully.",
              icon: "success"
            });

            window.location.href = "/read-and-grow/orders";

          } catch (error) {
            console.error("Return error:", error);
            Swal.fire({
              icon: "error",
              title: "Something went wrong",
              text: "Please try again later."
            });
          }
        });

  })
  function invoice(orderId) {
      Swal.fire({
        title: 'Generating Invoice...',
        text: 'Please wait while we prepare your invoice.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: true,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      setTimeout(() => {
        window.open(`/read-and-grow/invoice/${orderId}`);
        Swal.close();
      }, 1500);
    }

    </script>
</body>

</html>