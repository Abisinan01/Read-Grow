<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Toastify -->
    <link href="https://cdn.jsdelivr.net/npm/toastify-js@1.12.0/src/toastify.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js@1.12.0/src/toastify.min.js"></script>
    <style>
        .otp-input {
            width: 3rem;
            height: 3rem;
            text-align: center;
            font-size: 1.25rem;
            border: 2px solid #d1d5db;
            border-radius: 0.5rem;
            transition: border-color 0.3s ease;
        }
        .otp-input:focus {
            border-color: #ef4444;
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <div class="bg-white p-8 rounded-2xl shadow-lg w-96 text-center">
        <h2 class="text-2xl font-semibold italic mb-6 text-gray-800">OTP Verification</h2>
        <form id="otpForm" class="space-y-6">
            <div class="flex justify-center space-x-4 mb-4">
                <input type="text" id="otp1" maxlength="1" class="otp-input" required aria-label="OTP digit 1">
                <input type="text" id="otp2" maxlength="1" class="otp-input" required aria-label="OTP digit 2">
                <input type="text" id="otp3" maxlength="1" class="otp-input" required aria-label="OTP digit 3">
                <input type="text" id="otp4" maxlength="1" class="otp-input" required aria-label="OTP digit 4">
            </div>
            <div class="flex justify-between text-sm text-gray-600 mb-6">
                <button type="button" id="resendOtp" class="text-gray-600 hover:text-red-500 disabled:text-gray-400" disabled>Resend</button>
                <span id="Timer" class="font-medium">OTP expires in 00:30</span>
            </div>
            <button type="submit" id="verifyBtn"
                class="bg-red-600 text-white px-8 py-2 rounded-full text-lg hover:bg-red-700 transition duration-300 w-full">
                Verify
            </button>
        </form>
        <p id="resendCount" class="text-sm text-gray-600 mt-2">Resend attempts remaining: 3</p>
    </div>

    <script>
        // Toastify function
        function showToast(message, type = 'error') {
            Toastify({
                text: message,
                duration: 2000,
                gravity: "top",
                position: "center",
                backgroundColor: type === 'success' ? "#16a34a" : "#dc2626",
                stopOnFocus: true,
            }).showToast();
        }

        // Initialize resend counter
        let resendCount = parseInt(localStorage.getItem('resendCount')) || 3;
        const resendCountDisplay = document.getElementById('resendCount');
        resendCountDisplay.textContent = `Resend attempts remaining: ${resendCount}`;

        // Handle OTP input navigation
        const otpInputs = document.querySelectorAll('.otp-input');
        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                if (e.target.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });

        // Handle form submission
        document.getElementById('otpForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const verifyBtn = document.getElementById('verifyBtn');
            if (verifyBtn.disabled) {
                showToast('OTP has expired. Please resend a new OTP.');
                return;
            }

            const otp = Array.from(otpInputs).map(input => input.value).join('');
            if (otp.length !== 4) {
                showToast('Please enter a 4-digit OTP');
                return;
            }

            try {
                const token = localStorage.getItem('otpToken');
                const response = await fetch('/otp/otp-verify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                    },
                    body: JSON.stringify({ otp }),
                });

                const result = await response.json();

                if (!response.ok) {
                    showToast(result.message || 'Invalid OTP');
                    return;
                }

                if (result.success) {
                    showToast(result.message || 'OTP verified successfully', 'success');
                    setTimeout(() => {
                        window.location.href = result.redirect || '/dashboard';
                        localStorage.setItem('resendCount', '3'); // Reset counter on success
                    }, 1000);
                }
            } catch (error) {
                showToast('An error occurred. Please try again.');
                console.error(`OTP verification error: ${error.message}`);
            }
        });

        // Handle resend OTP
        document.getElementById('resendOtp').addEventListener('click', async () => {
            if (resendCount <= 0) {
                showToast('Maximum resend attempts reached.');
                return;
            }

            try {
                const token = localStorage.getItem('otpToken');
                if (!token) {
                    showToast('Session expired. Please log in again.');
                    return;
                }

                const response = await fetch('/otp/send-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`,
                    },
                    body: JSON.stringify({ token }),
                });

                const result = await response.json();

                if (!response.ok) {
                    showToast(result.message || 'Failed to resend OTP');
                    return;
                }

                resendCount--;
                localStorage.setItem('resendCount', resendCount);
                resendCountDisplay.textContent = `Resend attempts remaining: ${resendCount}`;
                showToast(result.message || 'OTP resent successfully', 'success');
                otpTimer(30); // Restart timer

                if (resendCount <= 0) {
                    document.getElementById('resendOtp').disabled = true;
                    document.getElementById('resendOtp').classList.add('cursor-not-allowed');
                    showToast('No more resend attempts available.');
                }
            } catch (error) {
                showToast('An error occurred while resending OTP.');
                console.error(`Resend OTP error: ${error.message}`);
            }
        });

        // OTP Timer Function
        function otpTimer(duration) {
            let time = duration;
            const timer = document.getElementById('Timer');
            const resendOtp = document.getElementById('resendOtp');
            const verifyBtn = document.getElementById('verifyBtn');

            resendOtp.disabled = true;
            resendOtp.classList.add('cursor-not-allowed');
            verifyBtn.disabled = false;
            verifyBtn.classList.remove('opacity-50', 'cursor-not-allowed');

            const interval = setInterval(() => {
                let minutes = Math.floor(time / 60);
                let seconds = time % 60;

                timer.textContent = `OTP expires in ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

                if (time <= 0) {
                    clearInterval(interval);
                    timer.textContent = 'OTP expired';
                    if (resendCount > 0) {
                        resendOtp.disabled = false;
                        resendOtp.classList.remove('cursor-not-allowed');
                    }
                    verifyBtn.disabled = true;
                    verifyBtn.classList.add('opacity-50', 'cursor-not-allowed');
                }
                time--;
            }, 1000);
        }

        // Start timer on page load
        otpTimer(30);
    </script>
</body>
</html>