<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        .sidebar-btn.active { background-color: #000; color: #fff; }
        .modal-backdrop { background-color: rgba(0, 0, 0, 0.5); }
    </style>
</head>
<body class="bg-gray-200 min-h-screen">
    <%- include("../partials/user/navBar.ejs") %>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex flex-col md:flex-row">
        <div class="w-full md:w-2/3 pl-0 md:pl-6">
            <h2 class="text-xl font-semibold mb-6">Your Addresses</h2>
            <button id="addAddressBtn" class="mb-6 bg-gray-600 text-white py-2 px-6 rounded-lg hover:bg-gray-700 transition duration-300">
                Add New Address
            </button>
        
            <% address.forEach(address => { %>
                <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 flex justify-between items-start mb-4">
                    <div class="w-full">
                        <div>
                            <p class="font-medium">
                                <%= address.firstName %>, <%= address.lastName %> (<%= address.addressType %>)
                                <% if (address.isDefault) { %> <span class="text-green-600 text-sm">[Default]</span> <% } %>
                            </p>
                            <p class="text-gray-600"><%= address.street %></p>
                            <p class="text-gray-600"><%= address.city %></p>
                            <p class="text-gray-600"><%= address.state %></p>
                            <p class="text-gray-600">Phone: <%= address.phoneNumber %></p>
                            <p class="text-gray-600 zip-data">Pincode: <%= address.pincode %></p>
                        </div>
                        <!-- Checkbox at the bottom -->
                        <div class="mt-2">
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" 
                                       class="setDefaultCheckbox h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500" 
                                       data-address-id="<%= address._id %>" 
                                       <%= address.isDefault ? 'checked' : '' %>>
                                <span class="text-sm text-gray-700">Set as Default</span>
                            </label>
                        </div>
                    </div>
                    <div class="flex space-x-2 items-start">
                        <button class="editAddressBtn text-gray-600 hover:text-gray-900" data-address-id="<%= address._id %>">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#4f4f4f">
                                <path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h357l-80 80H200v560h560v-278l80-80v358q0 33-23.5 56.5T760-120H200Zm280-360ZM360-360v-170l367-367q12-12 27-18t30-6q16 0 30.5 6t26.5 18l56 57q11 12 17 26.5t6 29.5q0 15-5.5 29.5T897-728L530-360H360Zm481-424-56-56 56 56ZM440-440h56l232-232-28-28-29-28-231 231v57Zm260-260-29-28 29 28 28 28-28-28Z"/>
                            </svg>
                        </button>
                        <button class="deleteAddressBtn" data-address-id="<%= address._id %>">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#4f4f4f">
                                <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            <% }) %>
        </div>
        <div class="mt-4 md:mt-0">
            <button class=" py-2 px-6 rounded-lg   transition duration-300" onclick="window.location.href='/read-and-grow/profile/<%= user.id %>'">Go Back</button>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div id="addressModal" class="fixed inset-0 flex items-center justify-center hidden modal-backdrop z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <h3 id="modalTitle" class="text-lg font-semibold mb-4">Add New Address</h3>
            <form id="addAddressForm" class="space-y-4">
                <div>
                    <span id="userId" hidden><%= user.id %></span>
                    <label class="block text-gray-700">First name</label>
                    <input type="text" name="firstName" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Last name</label>
                    <input type="text" name="lastName" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Street Address</label>
                    <input type="text" name="street" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">City</label>
                    <input type="text" name="city" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">State</label>
                    <input type="text" name="state" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Zip Code</label>
                    <input type="text" name="zip" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Phone Number</label>
                    <input type="tel" name="phone" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Address Type</label>
                    <select name="addressType" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                        <option value="" disabled selected>Select Address Type</option>
                        <option value="home">Home</option>
                        <option value="work">Work</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelAddBtn" class="bg-gray-300 text-gray-700 py-2 px-6 rounded-lg hover:bg-gray-400 transition duration-300">Cancel</button>
                    <button type="submit" id="saveAddBtn" class="bg-gray-600 text-white py-2 px-6 rounded-lg hover:bg-gray-700 transition duration-300">Save</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div id="addressModalEdit" class="fixed inset-0 flex items-center justify-center hidden modal-backdrop z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
            <h3 id="modalTitle" class="text-lg font-semibold mb-4">Edit Address</h3>
            <form id="editAddressForm" class="space-y-4">
                <div>
                    <span id="userId" hidden><%= user.id %></span>
                    <label class="block text-gray-700">First name</label>
                    <input type="text" name="firstName" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Last name</label>
                    <input type="text" name="lastName" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Street Address</label>
                    <input type="text" name="street" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">City</label>
                    <input type="text" name="city" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">State</label>
                    <input type="text" name="state" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Zip Code</label>
                    <input type="text" name="zip" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Phone Number</label>
                    <input type="tel" name="phone" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                </div>
                <div>
                    <label class="block text-gray-700">Address Type</label>
                    <select name="addressType" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500">
                        <option value="" disabled>Select Address Type</option>
                        <option value="home">Home</option>
                        <option value="work">Work</option>
                    </select>
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelEditBtn" class="bg-gray-300 text-gray-700 py-2 px-6 rounded-lg hover:bg-gray-400 transition duration-300">Cancel</button>
                    <button type="submit" id="saveEditBtn" class="bg-gray-600 text-white py-2 px-6 rounded-lg hover:bg-gray-700 transition duration-300">Save</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let isToastShowing = false;
        let isProcessing = false;

        function showToast(message, type = 'error') {
            if (isToastShowing) return;
            
            isToastShowing = true;
            Toastify({
                text: message,
                duration: 2000,
                gravity: "top",
                position: "center",
                backgroundColor: type === 'success' ? "#16a34a" : "#dc2626",
                stopOnFocus: true,
                callback: function() {
                    isToastShowing = false;
                }
            }).showToast();
        }

        document.addEventListener('DOMContentLoaded', function () {
            const addModal = document.getElementById('addressModal');
            const editModal = document.getElementById('addressModalEdit');
            const addForm = document.getElementById('addAddressForm');
            const editForm = document.getElementById('editAddressForm');
            const addCancelBtn = document.getElementById('cancelAddBtn');
            const editCancelBtn = document.getElementById('cancelEditBtn');
            const saveAddBtn = document.getElementById('saveAddBtn');
            const saveEditBtn = document.getElementById('saveEditBtn');

            // Open add modal
            document.getElementById('addAddressBtn').addEventListener('click', function () {
                if (isProcessing) return;
                addForm.reset();
                addModal.classList.remove('hidden');
            });

            // Close modals
            addCancelBtn.addEventListener('click', function () {
                addModal.classList.add('hidden');
            });

            editCancelBtn.addEventListener('click', function () {
                editModal.classList.add('hidden');
            });

            // Close modals on outside click
            addModal.addEventListener('click', (e) => {
                if (e.target === addModal) addModal.classList.add('hidden');
            });
            editModal.addEventListener('click', (e) => {
                if (e.target === editModal) editModal.classList.add('hidden');
            });

            // Edit address buttons
            document.querySelectorAll('.editAddressBtn').forEach(button => {
                button.addEventListener('click', function () {
                    if (isProcessing) return;
                    
                    const addressId = this.getAttribute('data-address-id');
                    const addressDiv = this.closest('.bg-white');
                    const fullName = addressDiv.querySelector('.font-medium').textContent.trim();
                    const nameParts = fullName.split(',');
                    const firstName = nameParts[0].trim();
                    const lastName = nameParts[1].split('(')[0].trim();
                    const addressType = fullName.match(/\((.*?)\)/)[1].trim();
                    const paragraphs = addressDiv.querySelectorAll('.text-gray-600');
                    const street = paragraphs[0].textContent.trim();
                    const city = paragraphs[1].textContent.trim();
                    const state = paragraphs[2].textContent.trim();
                    const phone = paragraphs[3].textContent.replace('Phone:', '').trim();
                    const zip = paragraphs[4].textContent.trim();

                    editForm.querySelector('input[name="firstName"]').value = firstName;
                    editForm.querySelector('input[name="lastName"]').value = lastName;
                    editForm.querySelector('input[name="street"]').value = street;
                    editForm.querySelector('input[name="city"]').value = city;
                    editForm.querySelector('input[name="state"]').value = state;
                    editForm.querySelector('input[name="zip"]').value = zip;
                    editForm.querySelector('input[name="phone"]').value = phone;
                    editForm.querySelector('select[name="addressType"]').value = addressType.toLowerCase();
                    editForm.setAttribute('data-address-id', addressId);

                    editModal.classList.remove('hidden');
                });
            });

            // Add address submission
            addForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                if (isProcessing) return;
                
                isProcessing = true;
                saveAddBtn.disabled = true;
                saveAddBtn.innerHTML = 'Saving...';
                
                const formData = new FormData(this);
                const userId = document.getElementById('userId').textContent.trim();
                const addressData = {
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    street: formData.get('street'),
                    city: formData.get('city'),
                    state: formData.get('state'),
                    zip: formData.get('zip'),
                    phone: formData.get('phone'),
                    addressType: formData.get('addressType')
                };

                try {
                    const response = await fetch('/read-and-grow/address', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(addressData)
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message || 'Failed to add address');
                    showToast('Address added successfully!', 'success');
                    addModal.classList.add('hidden');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } catch (err) {
                    showToast(err.message, 'error');
                    console.error('Error adding address:', err);
                } finally {
                    isProcessing = false;
                    saveAddBtn.disabled = false;
                    saveAddBtn.innerHTML = 'Save';
                }
            });

            // Edit address submission
            editForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                if (isProcessing) return;
                
                isProcessing = true;
                saveEditBtn.disabled = true;
                saveEditBtn.innerHTML = 'Saving...';
                
                const userId = document.getElementById('userId').textContent.trim();
                const formData = new FormData(this);
                const addressId = this.getAttribute('data-address-id');
                const addressData = {
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    street: formData.get('street'),
                    city: formData.get('city'),
                    state: formData.get('state'),
                    zip: formData.get('zip'),
                    phone: formData.get('phone'),
                    addressType: formData.get('addressType')
                };
                
                try {
                    const response = await fetch(`/read-and-grow/address/${userId}/${addressId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(addressData)
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message || 'Failed to update address');
                    showToast('Address updated successfully!', 'success');
                    editModal.classList.add('hidden');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } catch (err) {
                    showToast(err.message, 'error');
                    console.error('Error updating address:', err);
                } finally {
                    isProcessing = false;
                    saveEditBtn.disabled = false;
                    saveEditBtn.innerHTML = 'Save';
                }
            });

            // Set default address checkbox
            document.querySelectorAll('.setDefaultCheckbox').forEach(checkbox => {
                checkbox.addEventListener('change', async function () {
                    if (isProcessing) {
                        this.checked = !this.checked; // Revert the change
                        return;
                    }
                    
                    isProcessing = true;
                    const addressId = this.getAttribute('data-address-id');
                    const isChecked = this.checked;
                    const originalState = !isChecked;

                    try {
                        const response = await fetch(`/read-and-grow/address/${addressId}/set-default`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ isDefault: isChecked })
                        });
                        const result = await response.json();
                        if (!response.ok) throw new Error(result.message || 'Failed to set default');
                        showToast(isChecked ? 'Address set as default!' : 'Address removed as default!', 'success');
                        
                        // Uncheck all other checkboxes if this one is checked
                        if (isChecked) {
                            document.querySelectorAll('.setDefaultCheckbox').forEach(cb => {
                                if (cb !== this) {
                                    cb.checked = false;
                                }
                            });
                        }
                        
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                    } catch (err) {
                        showToast(err.message, 'error');
                        console.error('Error setting default:', err);
                        this.checked = originalState;  // Revert to original state on error
                    } finally {
                        setTimeout(() => {
                            isProcessing = false;
                        }, 2000);
                    }
                });
            });

            // Delete address
            document.querySelectorAll('.deleteAddressBtn').forEach(button => {
                button.addEventListener('click', function() {
                    if (isProcessing) return;
                    const addressId = this.getAttribute('data-address-id');
                    deleteConfirm(addressId);
                });
            });

            window.deleteConfirm = function (id) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) deleteAddress(id);
                });
            };

            async function deleteAddress(id) {
                if (isProcessing) return;
                isProcessing = true;
                
                try {
                    const response = await fetch(`/read-and-grow/address/${id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (!response.ok) throw new Error(result.message || 'Something went wrong');
                    showToast('Address deleted successfully', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } catch (error) {
                    console.error("Delete address error:", error);
                    showToast('Failed to delete address', 'error');
                } finally {
                    setTimeout(() => {
                        isProcessing = false;
                    }, 2000);
                }
            }
        });
    </script>
</body>
</html>