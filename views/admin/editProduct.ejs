<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Products - Read & Grow</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <style>
        body {
            margin: 0;
            overscroll-behavior: none;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        .container-fluid {
            display: flex;
            min-height: 100vh;
            width: 100%;
        }
        .main-content {
            flex: 1;
            transition: margin-left 0.3s;
        }
        @media (max-width: 768px) {
            #sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .main-content {
                margin-left: 0 !important;
                padding: 1rem;
            }
            .max-w-2xl {
                max-width: 100%;
            }
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800 font-sans">
    <div class="container-fluid">
        <%- include("../partials/admin/adminSideBar.ejs") %>
        <div class="main-content p-6" style="margin-left: calc(0% + 0px);">
            <header class="bg-white shadow-sm sticky top-0 z-10 mb-6">
                <div class="flex justify-between items-center px-6 py-4">
                    <h1 class="text-2xl font-semibold text-gray-800">Edit Products</h1>
                </div>
            </header>
            <div class="bg-white rounded-lg shadow-md p-6 max-w-2xl mx-auto">
                <form id="editProductForm" class="space-y-6" enctype="multipart/form-data">
                    <input type="hidden" id="productId" name="productId" value="<%= product._id %>">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700">Product Name</label>
                        <input type="text" id="name" name="name" required value="<%= product.name %>"
                            class="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                    </div>
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea id="description" name="description" required
                            class="mt-1 w-full p-3 border border-gray-300 rounded-lg h-32 focus:ring-2 focus:ring-blue-500 focus:outline-none"><%= product.description %></textarea>
                    </div>
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
                        <select id="category" name="category" required
                            class="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                            <option value="" disabled>Select a category</option>
                            <% categories.forEach(cat => { %>
                                <option value="<%= cat.categoryName %>" <%= cat.categoryName === product.category ? 'selected' : '' %>>
                                    <%= cat.categoryName %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                    <div>
                        <label for="author" class="block text-sm font-medium text-gray-700">Author</label>
                        <input type="text" id="author" name="author" required value="<%= product.authorName %>"
                            class="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label for="price" class="block text-sm font-medium text-gray-700">Price ($)</label>
                            <input type="number" id="price" name="price" step="0.01" min="0" required value="<%= product.price %>"
                                class="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                        </div>
                        <div>
                            <label for="stock" class="block text-sm font-medium text-gray-700">Stock</label>
                            <input type="number" id="stock" name="stock" min="0" required value="<%= product.stock %>"
                                class="mt-1 w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none">
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Images (up to 3)</label>
                        <div class="flex flex-col space-y-6">
                            <% for (let i = 1; i <= 3; i++) { %>
                                <div class="flex flex-col items-center justify-center p-6 border-2 border-dashed border-gray-300 rounded-lg">
                                    <input type="file" id="image<%= i %>" name="images" accept="image/*" class="hidden" onchange="previewImage(event, '<%= i %>')">
                                    <!-- Hidden input to store existing image URL -->
                                    <input type="hidden" id="existingImage<%= i %>" name="existingImages" value="<%= product.images[i-1] || '' %>">
                                    <button type="button" onclick="document.getElementById('image<%= i %>').click()"
                                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition">
                                        <i class="fas fa-upload mr-2"></i>Choose Image <%= i %>
                                    </button>
                                    <div id="preview<%= i %>" class="mt-4 w-full max-w-xs relative <%= product.images[i-1] ? '' : 'hidden' %>">
                                        <img id="img-preview<%= i %>" class="max-w-full rounded" src="<%= product.images[i-1] || '' %>" alt="Preview <%= i %>">
                                        <button type="button" onclick="startCrop('<%= i %>')"
                                            class="absolute bottom-2 right-2 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition">Crop</button>
                                        <button type="button" onclick="removeImage('<%= i %>')"
                                            class="absolute bottom-2 left-2 px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition">Remove</button>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    <div class="flex justify-end">
                        <button type="submit"
                            class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition focus:outline-none">Save Product</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div id="cropModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Crop Image</h2>
                <button id="cropModalClose" class="text-gray-500 hover:text-gray-700 text-2xl" aria-label="Close">Ã—</button>
            </div>
            <div class="mb-4">
                <img id="cropImage" class="max-w-full max-h-[60vh]" alt="Crop preview">
            </div>
            <div class="flex justify-end space-x-4">
                <button id="cancelCrop" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition">Cancel</button>
                <button id="applyCrop" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition">Save Crop</button>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            let croppers = {};
            let currentIndex = null;
            const validImageTypes = ['jpeg', 'jpg', 'png', 'webp'];

            [1, 2, 3].forEach(i => {
                const preview = document.getElementById(`preview${i}`);
                if (document.getElementById(`img-preview${i}`).src) preview.classList.remove('hidden');
            });

            window.previewImage = (event, index) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = e => {
                        document.getElementById(`img-preview${index}`).src = e.target.result;
                        document.getElementById(`preview${index}`).classList.remove('hidden');
                    };
                    reader.readAsDataURL(file);
                }
            };

            window.startCrop = index => {
                currentIndex = index;
                const img = document.getElementById(`img-preview${index}`);
                const cropImg = document.getElementById('cropImage');
                cropImg.src = img.src;
                document.getElementById('cropModal').classList.remove('hidden');
                if (croppers[index]) croppers[index].destroy();
                croppers[index] = new Cropper(cropImg, { aspectRatio: 1, viewMode: 2, autoCropArea: 1, responsive: true });
            };

            window.removeImage = index => {
                const input = document.getElementById(`image${index}`);
                const existingImageInput = document.getElementById(`existingImage${index}`);
                input.value = "";
                existingImageInput.value = ""; // Clear the existing image URL
                document.getElementById(`img-preview${index}`).src = "";
                document.getElementById(`preview${index}`).classList.add('hidden');
                if (croppers[index]) {
                    croppers[index].destroy();
                    delete croppers[index];
                }
            };

            document.getElementById('cropModalClose').addEventListener('click', () => {
                document.getElementById('cropModal').classList.add('hidden');
                if (croppers[currentIndex]) croppers[currentIndex].destroy();
            });

            document.getElementById('cancelCrop').addEventListener('click', () => {
                document.getElementById('cropModal').classList.add('hidden');
                if (croppers[currentIndex]) croppers[currentIndex].destroy();
            });

            document.getElementById('applyCrop').addEventListener('click', () => {
                if (croppers[currentIndex]) {
                    const croppedCanvas = croppers[currentIndex].getCroppedCanvas();
                    if (croppedCanvas) {
                        croppedCanvas.toBlob(blob => {
                            const file = new File([blob], `cropped-image${currentIndex}.jpg`, { type: 'image/jpeg' });
                            const imgPreview = document.getElementById(`img-preview${currentIndex}`);
                            imgPreview.src = URL.createObjectURL(blob);
                            const input = document.getElementById(`image${currentIndex}`);
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(file);
                            input.files = dataTransfer.files;
                            document.getElementById('cropModal').classList.add('hidden');
                            croppers[currentIndex].destroy();
                            delete croppers[currentIndex];
                        }, 'image/jpeg');
                    }
                }
            });

            document.getElementById('editProductForm').addEventListener('submit', async e => {
                e.preventDefault();
                const form = e.target;
                const name = form.name.value.trim();
                const description = form.description.value.trim();
                const category = form.category.value.trim();
                const author = form.author.value.trim();
                const price = form.price.value.trim();
                const stock = form.stock.value.trim();
                const productId = form.productId.value.trim();

                if (!name) return showToast("Product name is required");
                if (name.length < 3) return showToast("Product name must be at least 3 characters long");
                if (!description) return showToast("Description is required");
                if (!category) return showToast("Category is required");
                if (!author) return showToast("Author is required");
                if (!price || isNaN(price) || Number(price) <= 0) return showToast("Price must be a positive number");
                if (!stock || isNaN(stock) || Number(stock) < 0) return showToast("Stock must be a non-negative number");
                if (!productId) return showToast("Product ID is required");

                const formData = new FormData();
                formData.append('name', name);
                formData.append('description', description);
                formData.append('category', category);
                formData.append('author', author);
                formData.append('price', price);
                formData.append('stock', stock);
                formData.append('productId', productId);

                // Append new images and existing image URLs
                for (let i = 1; i <= 3; i++) {
                    const input = document.getElementById(`image${i}`);
                    const existingImageInput = document.getElementById(`existingImage${i}`);

                    if (input.files?.[0]) {
                        const extension = input.files[0].name.split('.').pop().toLowerCase();
                        if (!validImageTypes.includes(extension)) return showToast(`${extension} is an invalid file type`);
                        formData.append('images', input.files[0]);
                    } else if (existingImageInput.value) {
                        // Append existing image URL if no new image is uploaded
                        formData.append('existingImages', existingImageInput.value);
                    }
                }

                try {
                    Swal.fire({ title: 'Saving...', text: 'Please wait', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
                    const response = await fetch(`/admin/product/${productId}`, { method: 'PATCH', body: formData });
                    const result = await response.json();
                    Swal.close();
                    if (!response.ok) throw new Error(result.message || 'Failed to update product');
                    Swal.fire({ title: 'Success!', text: result.message || 'Product updated successfully', icon: 'success', confirmButtonColor: '#3085d6' });
                    setTimeout(() => window.location.href = '/admin/products', 1500);
                } catch (error) {
                    showToast(error.message || "Failed to update product");
                }
            });

            const showToast = (message) => {
                Toastify({
                    text: message,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "#f44336"
                }).showToast();
            };
        });
    </script>
</body>
</html>