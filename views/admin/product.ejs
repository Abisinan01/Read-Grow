<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read & Grow - Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        @media (max-width: 768px) {
            #sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }

            .main-content {
                margin-left: 0 !important;
                padding: 1rem;
            }

            .table-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
        }

        * {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        body {
            overscroll-behavior: none;
            margin: 0;
        }

        .container-fluid {
            display: flex;
            width: 100%;
            min-height: 100vh;
        }
    </style>
</head>

<body class="bg-gray-50 text-gray-800 font-sans min-h-screen">
    <div class="container-fluid flex ">
        <!-- Sidebar -->
        <div class="fixed md:sticky top-0 left-0 w-full md:w-[16%] h-auto md:h-screen bg-gray-400 py-5 shadow-lg flex flex-col" id="sidebar">
            <div class="px-5 text-2xl font-bold text-gray-700 pb-6">REad & GroW</div>
            <div class="flex flex-col flex-grow">
                <button data-path="/admin/dashboard" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Dashboard
                </button>
                <button data-path="/admin/sales-report" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Sales Report
                </button>
                <button data-path="/admin/products" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Product
                </button>
                <button data-path="/admin/users" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    User
                </button>
                <button data-path="/admin/orders" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Orders
                </button>
                <button data-path="/admin/category" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Category
                </button>
                <button data-path="/admin/offers" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Offers
                </button>
                <button data-path="/admin/coupons" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Coupons
                </button>
                <button data-path="/admin/transactions?page=1&limit=10" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 transition duration-200">
                    Transactions
                </button>
            </div>
            <button id="logoutButton" class="nav-button w-full px-5 py-4 text-left text-base hover:bg-gray-300 mt-auto border-t border-gray-500 transition duration-200">
                Logout
            </button>
        </div>
        
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const buttons = document.querySelectorAll('.nav-button');
                const currentPath = window.location.pathname; // e.g., "/admin/products" or "/admin/users?page=1&limit=6"
        
                // Function to remove query parameters for cleaner comparison
                const getBasePath = (path) => path.split('?')[0];
        
                // Set active button on page load
                buttons.forEach(button => {
                    const buttonPath = button.dataset.path ? getBasePath(button.dataset.path) : null;
                    const currentBasePath = getBasePath(currentPath);
        
                    // Highlight the button if the current path matches the button's base path
                    if (buttonPath && currentBasePath === buttonPath) {
                        button.classList.add("bg-black", "text-white");
                        button.classList.remove("hover:bg-gray-300");
                    } else {
                        // Ensure non-active buttons retain their hover effect
                        button.classList.remove("bg-black", "text-white");
                        button.classList.add("hover:bg-gray-300");
                    }
        
                    // Attach click event to navigate (excluding logout button)
                    if (button.dataset.path && button.id !== "logoutButton") {
                        button.addEventListener('click', () => {
                            window.location.href = button.dataset.path;
                        });
                    }
                });
        
                // Logout functionality
                document.getElementById("logoutButton").addEventListener('click', async () => {
                    const { value: confirmed } = await Swal.fire({
                        title: 'Are you sure you want to log out?',
                        text: "You won't be able to log in again unless you provide credentials.",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, log me out',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true
                    });
        
                    if (confirmed) {
                        try {
                            const response = await fetch("http://localhost:3999/admin/logout", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" }
                            });
        
                            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        
                            const result = await response.json();
        
                            if (result.success) {
                                Swal.fire("Logged out", "You are successfully logged out", "success");
                                setTimeout(() => { window.location.href = "/admin/login"; }, 1500);
                            } else {
                                Swal.fire("Logout Failed", "There was a problem in logout. Please try again later", "error");
                            }
                        } catch (error) {
                            console.error('Logout error:', error);
                            Swal.fire("Error!", "An error occurred. Please try again later.", "error");
                        }
                    }
                });
            });
        </script>

            <div class="flex-1 main-content w-full md:ml-[0%]">
                <header class="bg-white shadow-sm sticky top-0 z-10">
                    <div class="flex justify-between items-center px-4 sm:px-6 py-4">
                        <h1 class="text-xl sm:text-2xl font-semibold text-gray-800">Product Management</h1>
                        <div class="flex items-center space-x-4 sm:space-x-6"></div>
                    </div>
                </header>

                <main class="p-4 sm:p-6">
                    <div class="bg-white rounded-lg shadow-md">
                        <div
                            class="p-4 sm:p-6 flex flex-col lg:flex-row lg:items-center lg:justify-between border-b border-gray-200">
                            <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-4 lg:mb-0">Product List</h2>
                            <div class="flex flex-col sm:flex-row items-center w-full sm:w-auto gap-4">
                                <form id="searchForm"
                                    class="flex flex-col sm:flex-row items-center gap-4 w-full sm:w-auto">
                                    <div class="relative w-full sm:w-64">
                                        <input type="text" placeholder="Search products..." name="searchInput" required
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <i
                                            class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                                    </div>
                                    <button type="submit"
                                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center transition duration-150 w-full sm:w-auto">Search</button>
                                </form>
                                <button
                                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center transition duration-150 w-full sm:w-auto"
                                    onclick="window.location.href='/admin/products'">Reset</button>
                                <button onclick="window.location.href='/admin/add-products'"
                                    class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-black flex items-center transition duration-150 w-full sm:w-auto">
                                    <i class="fas fa-plus mr-2"></i> Add Product
                                </button>
                            </div>
                        </div>

                        <div class="table-container overflow-x-auto">
                            <table class="w-full table-auto min-w-[600px]">
                                <thead>
                                    <tr
                                        class="bg-gray-100 text-gray-600 uppercase text-xs font-semibold tracking-wider">
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Product</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Category</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Stock</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Price</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Status</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <% allProducts.forEach(product=> { %>
                                        <tr class="hover:bg-gray-50 transition-colors">
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <div class="flex items-center">
                                                    <img src="<%= product?.images[0] || '/default-image.jpg' %>"
                                                        alt="Book cover"
                                                        class="h-10 w-10 sm:h-14 sm:w-14 rounded-md object-cover shadow-sm">
                                                    <div class="ml-2 sm:ml-4">
                                                        <div class="text-xs sm:text-sm font-medium text-gray-900">
                                                            <%= product?.name %>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <span
                                                    class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                                                    <%= product?.category %>
                                                </span>
                                            </td>
                                            <td
                                                class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-900">
                                                <%= product?.stock %> copies
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <div class="text-xs sm:text-sm text-gray-900">Rs. <%= product?.price %>
                                                </div>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <span
                                                    class="px-2 py-1 text-xs font-semibold rounded-full <%= product?.stock === 0 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800' %>">
                                                    <%= product?.stock===0 ? 'Out of Stock' : 'In Stock' %>
                                                </span>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm">
                                                <div class="flex space-x-2 sm:space-x-3">
                                                    <button class="text-blue-600 hover:text-blue-800" title="Edit"><i
                                                            onclick="window.location.href='/admin/product/<%= product?._id %>'"
                                                            class="fas fa-edit"></i></button>
                                                    <button class="text-red-600 hover:text-red-900" title="Delete"><i
                                                            onclick="deleteConfirm('<%= product?._id %>')"
                                                            class="fas fa-trash-alt"></i></button>
                                                    <button class="text-gray-600 hover:text-gray-900 p-1 w-5 h-5 sm:w-6 sm:h-6 rounded"
                                                            title="View"
                                                            onclick="isBlocked(event, '/admin/block-product/<%= product?._id %>')">
                                                            <i class="fas <%= product?.isBlocked ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                                                    </button>
                                                        
                                                </div>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                        <div class="flex justify-center mt-6">
                            <nav class="flex justify-center mt-6">
                                <ul class="inline-flex items-center -space-x-px text-sm">
                                  <!-- Previous Page -->
                                  <% if(page > 1){ %>
                                    <li>
                                      <a href="/admin/products?page=<%= page - 1 %>&limit=<%= limit %>" 
                                         class="flex items-center justify-center px-3 h-10 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                        </svg>
                                      </a>
                                    </li>
                                  <% } else { %>
                                    <li>
                                      <span class="flex items-center justify-center px-3 h-10 ml-0 leading-tight text-gray-300 bg-gray-100 border border-gray-200 rounded-l-lg cursor-not-allowed">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                        </svg>
                                      </span>
                                    </li>
                                  <% } %>
                              
                                  <!-- Page Numbers -->
                                  <% for(let i = 1; i <= totalPages; i++) { %>
                                    <li>
                                      <a href="/admin/products?page=<%= i %>&limit=<%= limit %>" 
                                         class="flex items-center justify-center px-3 h-10 leading-tight 
                                                border border-gray-300 
                                                <%= page === i ? 'bg-blue-500 text-white' : 'bg-white text-gray-500 hover:bg-gray-100' %>">
                                        <%= i %>
                                      </a>
                                    </li>
                                  <% } %>
                              
                                  <!-- Next Page -->
                                  <% if(page < totalPages){ %>
                                    <li>
                                      <a href="/admin/products?page=<%= page + 1 %>&limit=<%= limit %>" 
                                         class="flex items-center justify-center px-3 h-10 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                        </svg>
                                      </a>
                                    </li>
                                  <% } else { %>
                                    <li>
                                      <span class="flex items-center justify-center px-3 h-10 leading-tight text-gray-300 bg-gray-100 border border-gray-200 rounded-r-lg cursor-not-allowed">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                        </svg>
                                      </span>
                                    </li>
                                  <% } %>
                                </ul>
                              </nav>
                              
                        </div>
                    
                </main>
            </div>
    </div>

    <script>
        // Initialize Toastify
        const toastifyOptions = {
            duration: 3000,
            position: "right",
            style: { background: "red" } // Red background for errors
        };

        // Delete Confirmation
        function deleteConfirm(productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteProduct(productId);
                }
            });
        }

        // Delete Product
        async function deleteProduct(productId) {
            try {
                const response = await fetch(`/admin/product/${productId}`, { method: 'DELETE' });
                const result = await response.json();

                if (!response.ok) {
                    Toastify({ text: result.message || "Something went wrong", ...toastifyOptions }).showToast();
                    return;
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: 'Product deleted successfully',
                    timer: 1500,
                    showConfirmButton: false
                });
                location.reload();
            } catch (error) {
                console.error("Delete error:", error);
                Toastify({ text: "Failed to delete product", ...toastifyOptions }).showToast();
            }
        }

        // Toggle Product Status
        async function isBlocked(event, url) {
            const result = await Swal.fire({
                title: 'Change status?',
                text: "Do you want to update this product's status?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            });
        
            if (result.isConfirmed) {
                try {
                    const response = await fetch(url, { method: 'PUT' });
        
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
        
                    const data = await response.json();
                    console.log("API Response:", data); // Debugging
        
                    if (data.success) {
                        // Get the button element from the event
                        const button = event.target.tagName === 'I' ? event.target.parentNode : event.target;
        
                        if (button) {
                            const icon = button.querySelector('i') || event.target;
        
                            if (icon) {
                                icon.classList.toggle('fa-eye', !data.isBlocked);
                                icon.classList.toggle('fa-eye-slash', data.isBlocked);
                            } else {
                                console.error("Icon element not found inside the button.");
                            }
                        } else {
                            console.error("Button element not found.");
                        }
        
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: 'Status changed',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Toastify({ text: "Failed to update status", ...toastifyOptions }).showToast();
                    }
                } catch (error) {
                    console.error("Status error:", error);
                    Toastify({ text: "Something went wrong", ...toastifyOptions }).showToast();
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
           const form = document.getElementById("searchForm");
           const tbody = document.querySelector('tbody');
           const paginationNav = document.querySelector('.flex.space-x-2');
           let currentQuery = '';
           let currentPage = 1;
           const limit = 5; // You can adjust this or make it dynamic if needed
       
           // Load initial data from URL
           const urlParams = new URLSearchParams(window.location.search);
           currentQuery = urlParams.get('query') || '';
           currentPage = parseInt(urlParams.get('page')) || 1;
       
           // Set search input value from URL if present
           if(currentQuery) {
               document.querySelector('input[name="searchInput"]').value = currentQuery;
           }
       
           // Handle search form submission
           form.addEventListener("submit", async function (event) {
               event.preventDefault();
               currentQuery = document.querySelector('input[name="searchInput"]').value.trim();
               currentPage = 1; // Reset to page 1 on new search
               fetchData();
           });
       
           // Main data fetching and rendering
           async function fetchData() {
               const url = `/admin/products?page=${currentPage}&limit=${limit}${currentQuery ? `&query=${encodeURIComponent(currentQuery)}` : ''}`;
               try {
                   const response = await fetch(url, {
                       method: 'GET',
                       headers: { 'X-Requested-With': 'XMLHttpRequest' }
                   });
                   const data = await response.json();
       
                   if (response.ok && data.success) {
                       // Update table
                       tbody.innerHTML = '';
                       if (!data.allProducts || data.allProducts.length === 0) {
                           tbody.innerHTML = `
                               <tr class="hover:bg-gray-50 transition">
                                   <td colspan="6" class="px-6 py-4 text-center">
                                       <div class="text-bold text-red-600 text-sm">
                                           No products found
                                       </div>
                                   </td>
                               </tr>`;
                       } else {
                           data.allProducts.forEach(product => {
                               tbody.innerHTML += `
                                   <tr class="hover:bg-gray-50 transition">
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <div class="flex items-center">
                                               <img src="${product?.images?.[0] || '/default-image.jpg'}" 
                                                    alt="Book cover" 
                                                    class="h-14 w-14 rounded-md object-cover">
                                               <div class="ml-4">${product.name || 'Unnamed Product'}</div>
                                           </div>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full">
                                               ${product?.category || 'Uncategorized'}
                                           </span>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">${product?.stock || 0} copies</td>
                                       <td class="px-6 py-4 whitespace-nowrap">Rs. ${product?.price || '0.00'}</td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <span class="px-2 py-1 rounded-full text-sm ${product?.stock === 0 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">
                                               ${product?.stock === 0 ? 'Out of Stock' : 'In Stock'}
                                           </span>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <div class="flex space-x-3">
                                               <button class="text-blue-600 hover:text-blue-800" 
                                                       onclick="window.location.href='/admin/product/${product?._id}'">
                                                   <i class="fas fa-edit"></i>
                                               </button>
                                               <button class="text-red-600 hover:text-red-900" 
                                                       onclick="deleteConfirm('${product?._id}')">
                                                   <i class="fas fa-trash-alt"></i>
                                               </button>
                                               <button class="text-gray-600 hover:text-gray-900 p-1 w-5 h-5 sm:w-6 sm:h-6 rounded" 
                                                       onclick="isBlocked(event, '/admin/block-product/${product?._id}')">
                                                   <i class="fas ${product?.isBlocked ? 'fa-eye-slash' : 'fa-eye'}"></i>
                                               </button>
                                           </div>
                                       </td>
                                   </tr>`;
                           });
                       }
       
                       // Update pagination
                       if (paginationNav) {
                           paginationNav.innerHTML = '';
                           const totalPages = data.totalPages || 1;
                           if (currentPage > 1) {
                               paginationNav.innerHTML += `
                                   <a href="#" 
                                      class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50"
                                      onclick="event.preventDefault(); currentPage = ${currentPage - 1}; fetchData();">Previous</a>`;
                           } else {
                               paginationNav.innerHTML += `
                                   <span class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Previous</span>`;
                           }
           
                           for (let i = 1; i <= totalPages; i++) {
                               paginationNav.innerHTML += `
                                   <a href="#" 
                                      class="px-2 sm:px-3 py-1 rounded-md text-xs sm:text-sm ${i === currentPage ? 'bg-blue-600 text-white' : 'border border-gray-300 text-gray-500 hover:bg-gray-50'}"
                                      onclick="event.preventDefault(); currentPage = ${i}; fetchData();">${i}</a>`;
                           }
           
                           if (currentPage < totalPages) {
                               paginationNav.innerHTML += `
                                   <a href="#" 
                                      class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50"
                                      onclick="event.preventDefault(); currentPage = ${currentPage + 1}; fetchData();">Next</a>`;
                           } else {
                               paginationNav.innerHTML += `
                                   <span class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Next</span>`;
                           }
                       }
       
                       // Update URL without reloading
                       const newUrl = url.replace('/admin/products', window.location.pathname);
                       history.pushState({}, '', newUrl);
                   } else {
                       tbody.innerHTML = `
                           <tr class="hover:bg-gray-50 transition">
                               <td colspan="6" class="px-6 py-4 text-center">
                                   <div class="text-bold text-red-600 text-sm">
                                       No products found
                                   </div>
                               </td>
                           </tr>`;
                       console.log('Server response error:', data?.message || 'Unknown error');
                   }
               } catch (error) {
                   console.error('Fetch error:', error);
                   tbody.innerHTML = `
                       <tr class="hover:bg-gray-50 transition">
                           <td colspan="6" class="px-6 py-4 text-center">
                               <div class="text-bold text-red-600 text-sm">
                                   Failed to load products
                               </div>
                           </td>
                       </tr>`;
                   // Add Toastify notification
                   if (typeof Toastify !== 'undefined') {
                       Toastify({
                           text: "Failed to load products",
                           duration: 3000,
                           gravity: "top",
                           position: "center",
                           backgroundColor: "#f44336"
                       }).showToast();
                   }
               }
           }

           // Call fetchData initially if needed
           // fetchData();
       });
    </script>
</body>

</html>