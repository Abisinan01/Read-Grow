<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read & Grow - Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        @media (max-width: 768px) {
            #sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }

            .main-content {
                margin-left: 0 !important;
                padding: 1rem;
            }

            .table-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
        }

        * {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        body {
            overscroll-behavior: none;
            margin: 0;
        }

        .container-fluid {
            display: flex;
            width: 100%;
            min-height: 100vh;
        }
    </style>
</head>

<body class="bg-gray-50 text-gray-800 font-sans min-h-screen">
    <div class="container-fluid flex ">
        <!-- Sidebar -->
        <%- include("../partials/admin/adminSideBar.ejs") %>

            <div class="flex-1 main-content w-full" style="margin-left: calc(0% + 0px);">
                <header class="bg-white shadow-sm sticky top-0 z-10">
                    <div class="flex justify-between items-center px-4 sm:px-6 py-4">
                        <h1 class="text-xl sm:text-2xl font-semibold text-gray-800">Product Management</h1>
                        <div class="flex items-center space-x-4 sm:space-x-6"></div>
                    </div>
                </header>

                <main class="p-4 sm:p-6">
                    <div class="bg-white rounded-lg shadow-md">
                        <div
                            class="p-4 sm:p-6 flex flex-col lg:flex-row lg:items-center lg:justify-between border-b border-gray-200">
                            <h2 class="text-lg sm:text-xl font-semibold text-gray-800 mb-4 lg:mb-0">Product List</h2>
                            <div class="flex flex-col sm:flex-row items-center w-full sm:w-auto gap-4">
                                <form id="searchForm"
                                    class="flex flex-col sm:flex-row items-center gap-4 w-full sm:w-auto">
                                    <div class="relative w-full sm:w-64">
                                        <input type="text" placeholder="Search products..." name="searchInput" required
                                            class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <i
                                            class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                                    </div>
                                    <button type="submit"
                                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center transition duration-150 w-full sm:w-auto">Search</button>
                                </form>
                                <button
                                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center transition duration-150 w-full sm:w-auto"
                                    onclick="window.location.href='/admin/products'">Reset</button>
                                <button onclick="window.location.href='/admin/add-products'"
                                    class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-black flex items-center transition duration-150 w-full sm:w-auto">
                                    <i class="fas fa-plus mr-2"></i> Add Product
                                </button>
                            </div>
                        </div>

                        <div class="table-container overflow-x-auto">
                            <table class="w-full table-auto min-w-[600px]">
                                <thead>
                                    <tr
                                        class="bg-gray-100 text-gray-600 uppercase text-xs font-semibold tracking-wider">
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Product</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Category</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Stock</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Price</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Status</th>
                                        <th class="px-2 sm:px-6 py-3 sm:py-4 text-left">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    <% allProducts.forEach(product=> { %>
                                        <tr class="hover:bg-gray-50 transition-colors">
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <div class="flex items-center">
                                                    <img src="<%= product.images[0] || '/default-image.jpg' %>"
                                                        alt="Book cover"
                                                        class="h-10 w-10 sm:h-14 sm:w-14 rounded-md object-cover shadow-sm">
                                                    <div class="ml-2 sm:ml-4">
                                                        <div class="text-xs sm:text-sm font-medium text-gray-900">
                                                            <%= product.name %>
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <span
                                                    class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                                                    <%= product.category %>
                                                </span>
                                            </td>
                                            <td
                                                class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-900">
                                                <%= product.stock %> copies
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <div class="text-xs sm:text-sm text-gray-900">Rs. <%= product.price %>
                                                </div>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                                                <span
                                                    class="px-2 py-1 text-xs font-semibold rounded-full <%= product.stock === 0 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800' %>">
                                                    <%= product.stock===0 ? 'Out of Stock' : 'In Stock' %>
                                                </span>
                                            </td>
                                            <td class="px-2 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm">
                                                <div class="flex space-x-2 sm:space-x-3">
                                                    <button class="text-blue-600 hover:text-blue-800" title="Edit"><i
                                                            onclick="window.location.href='/admin/product/<%= product._id %>'"
                                                            class="fas fa-edit"></i></button>
                                                    <button class="text-red-600 hover:text-red-900" title="Delete"><i
                                                            onclick="deleteConfirm('<%= product._id %>')"
                                                            class="fas fa-trash-alt"></i></button>
                                                    <button class="text-gray-600 hover:text-gray-900 p-1 w-5 h-5 sm:w-6 sm:h-6 rounded"
                                                            title="View"
                                                            onclick="isBlocked(event, '/admin/block-product/<%= product._id %>')">
                                                            <i class="fas <%= product.isBlocked ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                                                    </button>
                                                        
                                                </div>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                            </table>
                        </div>

                        <div
                            class="px-4 sm:px-6 py-4 flex flex-col sm:flex-row items-center justify-between border-t border-gray-200">
                            <div class="flex space-x-2">
                            <% if (page> 1) { %>
                                    <a href="/admin/products/?page=<%= page - 1 %>&limit=<%= limit %><%= query ? '&query=' + query : '' %>"
                                        class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50">Previous</a>
                                <% } else { %>
                                    <span
                                        class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Previous</span>
                                <% } %>

                                <% for (let i=1; i <=totalPages; i++) { %>
                                    <a href="/admin/products/?page=<%= i %>&limit=<%= limit %><%= query ? '&query=' + query : '' %>"
                                        class="px-2 sm:px-3 py-1 rounded-md text-xs sm:text-sm <%= i === page ? 'bg-blue-600 text-white' : 'border border-gray-300 text-gray-500 hover:bg-gray-50' %>">
                                        <%= i %>
                                    </a>
                                    <% } %>

                                <% if (page < totalPages) { %>
                                    <a href="/admin/products/?page=<%= page + 1 %>&limit=<%= limit %><%= query ? '&query=' + query : '' %>"
                                        class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50">Next</a>
                                    <% } else { %>
                                        <span
                                         class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Next</span>
                             <% } %>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
    </div>

    <script>

        // Initialize Toastify
        const toastifyOptions = {
            duration: 3000,
            position: "right",
            style: { background: "red" } // Red background for errors
        };

        // Delete Confirmation
        function deleteConfirm(productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteProduct(productId);
                }
            });
        }

        // Delete Product
        async function deleteProduct(productId) {
            try {
                const response = await fetch(`/admin/product/${productId}`, { method: 'DELETE' });
                const result = await response.json();

                if (!response.ok) {
                    Toastify({ text: result.message || "Something went wrong", ...toastifyOptions }).showToast();
                    return;
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: 'Product deleted successfully',
                    timer: 1500,
                    showConfirmButton: false
                });
                location.reload();
            } catch (error) {
                console.error("Delete error:", error);
                Toastify({ text: "Failed to delete product", ...toastifyOptions }).showToast();
            }
        }

        // Toggle Product Status
        async function isBlocked(event, url) {
            const result = await Swal.fire({
                title: 'Change status?',
                text: "Do you want to update this product's status?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            });
        
            if (result.isConfirmed) {
                try {
                    const response = await fetch(url, { method: 'PUT' });
        
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
        
                    const data = await response.json();
                    console.log("API Response:", data); // Debugging
        
                    if (data.success) {
                        // Get the button element from the event
                        const button = event.target.closest('button'); // Ensure it selects the correct button
        
                        if (button) {
                            const icon = button.querySelector('i'); // Find the <i> tag inside the button
        
                            if (icon) {
                                icon.classList.toggle('fa-eye', !data.isBlocked);
                                icon.classList.toggle('fa-eye-slash', data.isBlocked);
                            } else {
                                console.error("Icon element not found inside the button.");
                            }
                        } else {
                            console.error("Button element not found.");
                        }
        
                        Swal.fire({
                            icon: 'success',
                            title: 'Updated!',
                            text: 'Status changed',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Toastify({ text: "Failed to update status", ...toastifyOptions }).showToast();
                    }
                } catch (error) {
                    console.error("Status error:", error);
                    Toastify({ text: "Something went wrong", ...toastifyOptions }).showToast();
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
           const form = document.getElementById("searchForm");
           const tbody = document.querySelector('tbody');
           const paginationNav = document.querySelector('.flex.space-x-2');
           let currentQuery = '';
           let currentPage = 1;
           const limit = 5; // You can adjust this or make it dynamic if needed
       
           // Load initial data from URL
           const urlParams = new URLSearchParams(window.location.search);
           currentQuery = urlParams.get('query') || '';
           currentPage = parseInt(urlParams.get('page')) || 1;
           fetchData();
       
           // Handle search form submission
           form.addEventListener("submit", async function (event) {
               event.preventDefault();
               currentQuery = document.querySelector('input[name="searchInput"]').value.trim();
               currentPage = 1; // Reset to page 1 on new search
               fetchData();
           });
       
           // Main data fetching and rendering
           async function fetchData() {
               const url = `/admin/products?page=${currentPage}&limit=${limit}${currentQuery ? `&query=${encodeURIComponent(currentQuery)}` : ''}`;
               try {
                   const response = await fetch(url, {
                       method: 'GET',
                       headers: { 'X-Requested-With': 'XMLHttpRequest' }
                   });
                   const data = await response.json();
       
                   if (response.ok && data.success) {
                       // Update table
                       tbody.innerHTML = '';
                       if (!data.allProducts || data.allProducts.length === 0) {
                           tbody.innerHTML = `
                               <tr class="hover:bg-gray-50 transition">
                                   <td colspan="6" class="px-6 py-4 text-center">
                                       <div class="text-bold text-red-600 text-sm">
                                           No products found
                                       </div>
                                   </td>
                               </tr>`;
                       } else {
                           data.allProducts.forEach(product => {
                               tbody.innerHTML += `
                                   <tr class="hover:bg-gray-50 transition">
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <div class="flex items-center">
                                               <img src="${product.images?.[0] || '/default-image.jpg'}" 
                                                    alt="Book cover" 
                                                    class="h-14 w-14 rounded-md object-cover">
                                               <div class="ml-4">${product.name || 'Unnamed Product'}</div>
                                           </div>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full">
                                               ${product.category || 'Uncategorized'}
                                           </span>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">${product.stock || 0} copies</td>
                                       <td class="px-6 py-4 whitespace-nowrap">Rs. ${product.price || '0.00'}</td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <span class="px-2 py-1 rounded-full text-sm ${product.stock === 0 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">
                                               ${product.stock === 0 ? 'Out of Stock' : 'In Stock'}
                                           </span>
                                       </td>
                                       <td class="px-6 py-4 whitespace-nowrap">
                                           <div class="flex space-x-3">
                                               <button class="text-blue-600 hover:text-blue-800" 
                                                       onclick="window.location.href='/admin/product/${product._id}'">
                                                   <i class="fas fa-edit"></i>
                                               </button>
                                               <button class="text-red-600 hover:text-red-900" 
                                                       onclick="deleteConfirm('${product._id}')">
                                                   <i class="fas fa-trash-alt"></i>
                                               </button>
                                               <button class="text-gray-600 hover:text-gray-900" 
                                                       onclick="isBlocked(event, '/admin/block-product/${product._id}')">
                                                   <i class="fas ${product.isBlocked ? 'fa-eye-slash' : 'fa-eye'}"></i>
                                               </button>
                                           </div>
                                       </td>
                                   </tr>`;
                           });
                       }
       
                       // Update pagination
                       paginationNav.innerHTML = '';
                       const totalPages = data.totalPages || 1;
                       if (currentPage > 1) {
                           paginationNav.innerHTML += `
                               <a href="#" 
                                  class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50"
                                  onclick="event.preventDefault(); currentPage--; fetchData();">Previous</a>`;
                       } else {
                           paginationNav.innerHTML += `
                               <span class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Previous</span>`;
                       }
       
                       for (let i = 1; i <= totalPages; i++) {
                           paginationNav.innerHTML += `
                               <a href="#" 
                                  class="px-2 sm:px-3 py-1 rounded-md text-xs sm:text-sm ${i === currentPage ? 'bg-blue-600 text-white' : 'border border-gray-300 text-gray-500 hover:bg-gray-50'}"
                                  onclick="event.preventDefault(); currentPage = ${i}; fetchData();">${i}</a>`;
                       }
       
                       if (currentPage < totalPages) {
                           paginationNav.innerHTML += `
                               <a href="#" 
                                  class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-500 hover:bg-gray-50"
                                  onclick="event.preventDefault(); currentPage++; fetchData();">Next</a>`;
                       } else {
                           paginationNav.innerHTML += `
                               <span class="px-2 sm:px-3 py-1 border border-gray-300 rounded-md text-xs sm:text-sm text-gray-400 bg-gray-100 cursor-not-allowed">Next</span>`;
                       }
       
                       // Update URL without reloading
                       history.pushState({}, '', url);
                   } else {
                       tbody.innerHTML = `
                           <tr class="hover:bg-gray-50 transition">
                               <td colspan="6" class="px-6 py-4 text-center">
                                   <div class="text-bold text-red-600 text-sm">
                                       No products found
                                   </div>
                               </td>
                           </tr>`;
                       console.log('Server response error:', data.message || 'Unknown error');
                   }
               } catch (error) {
                   console.error('Fetch error:', error);
                   tbody.innerHTML = `
                       <tr class="hover:bg-gray-50 transition">
                           <td colspan="6" class="px-6 py-4 text-center">
                               <div class="text-bold text-red-600 text-sm">
                                   Failed to load products
                               </div>
                           </td>
                       </tr>`;
                   // Optional: Add Toastify notification if you have it included
                   if (typeof Toastify !== 'undefined') {
                       Toastify({
                           text: "Failed to load products",
                           duration: 3000,
                           gravity: "top",
                           position: "center",
                           backgroundColor: "#f44336"
                       }).showToast();
                   }
               }
           }
       });
    </script>
</body>

</html>